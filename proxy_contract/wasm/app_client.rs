// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
    fn new_with_contracts_id(
        &self,
        ping_contract_id: ActorId,
        traffic_light_contract_id: ActorId,
    ) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::NewWithContractsId>::new(
            self.remoting.clone(),
            (ping_contract_id, traffic_light_contract_id),
        )
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
        pub struct NewWithContractsId(());
        impl NewWithContractsId {
            #[allow(dead_code)]
            pub fn encode_call(
                ping_contract_id: ActorId,
                traffic_light_contract_id: ActorId,
            ) -> Vec<u8> {
                <NewWithContractsId as ActionIo>::encode_call(&(
                    ping_contract_id,
                    traffic_light_contract_id,
                ))
            }
        }
        impl ActionIo for NewWithContractsId {
            const ROUTE: &'static [u8] = &[
                72, 78, 101, 119, 87, 105, 116, 104, 67, 111, 110, 116, 114, 97, 99, 116, 115, 73,
                100,
            ];
            type Params = (ActorId, ActorId);
            type Reply = ();
        }
    }
}
pub struct PingCaller<R> {
    remoting: R,
}
impl<R> PingCaller<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::PingCaller for PingCaller<R> {
    type Args = R::Args;
    fn call_ping(&mut self) -> impl Call<Output = ProxyPingCallerEvent, Args = R::Args> {
        RemotingAction::<_, ping_caller::io::CallPing>::new(self.remoting.clone(), ())
    }
    fn call_pong(&mut self) -> impl Call<Output = ProxyPingCallerEvent, Args = R::Args> {
        RemotingAction::<_, ping_caller::io::CallPong>::new(self.remoting.clone(), ())
    }
    fn call_all_calls(&self) -> impl Query<Output = ProxyPingCallerEvent, Args = R::Args> {
        RemotingAction::<_, ping_caller::io::CallAllCalls>::new(self.remoting.clone(), ())
    }
    fn call_last_who_call(&self) -> impl Query<Output = ProxyPingCallerEvent, Args = R::Args> {
        RemotingAction::<_, ping_caller::io::CallLastWhoCall>::new(self.remoting.clone(), ())
    }
}

pub mod ping_caller {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct CallPing(());
        impl CallPing {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <CallPing as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for CallPing {
            const ROUTE: &'static [u8] = &[
                40, 80, 105, 110, 103, 67, 97, 108, 108, 101, 114, 32, 67, 97, 108, 108, 80, 105,
                110, 103,
            ];
            type Params = ();
            type Reply = super::ProxyPingCallerEvent;
        }
        pub struct CallPong(());
        impl CallPong {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <CallPong as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for CallPong {
            const ROUTE: &'static [u8] = &[
                40, 80, 105, 110, 103, 67, 97, 108, 108, 101, 114, 32, 67, 97, 108, 108, 80, 111,
                110, 103,
            ];
            type Params = ();
            type Reply = super::ProxyPingCallerEvent;
        }
        pub struct CallAllCalls(());
        impl CallAllCalls {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <CallAllCalls as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for CallAllCalls {
            const ROUTE: &'static [u8] = &[
                40, 80, 105, 110, 103, 67, 97, 108, 108, 101, 114, 48, 67, 97, 108, 108, 65, 108,
                108, 67, 97, 108, 108, 115,
            ];
            type Params = ();
            type Reply = super::ProxyPingCallerEvent;
        }
        pub struct CallLastWhoCall(());
        impl CallLastWhoCall {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <CallLastWhoCall as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for CallLastWhoCall {
            const ROUTE: &'static [u8] = &[
                40, 80, 105, 110, 103, 67, 97, 108, 108, 101, 114, 60, 67, 97, 108, 108, 76, 97,
                115, 116, 87, 104, 111, 67, 97, 108, 108,
            ];
            type Params = ();
            type Reply = super::ProxyPingCallerEvent;
        }
    }
}
pub struct Proxy<R> {
    remoting: R,
}
impl<R> Proxy<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Proxy for Proxy<R> {
    type Args = R::Args;
    fn add_admin(&mut self, new_admin: ActorId) -> impl Call<Output = ProxyEvent, Args = R::Args> {
        RemotingAction::<_, proxy::io::AddAdmin>::new(self.remoting.clone(), new_admin)
    }
    fn change_ping_contract_id(
        &mut self,
        contract_id: ActorId,
    ) -> impl Call<Output = ProxyEvent, Args = R::Args> {
        RemotingAction::<_, proxy::io::ChangePingContractId>::new(
            self.remoting.clone(),
            contract_id,
        )
    }
    fn change_traffic_light_contract_id(
        &mut self,
        contract_id: ActorId,
    ) -> impl Call<Output = ProxyEvent, Args = R::Args> {
        RemotingAction::<_, proxy::io::ChangeTrafficLightContractId>::new(
            self.remoting.clone(),
            contract_id,
        )
    }
    fn contracts_id(&self) -> impl Query<Output = ProxyEvent, Args = R::Args> {
        RemotingAction::<_, proxy::io::ContractsId>::new(self.remoting.clone(), ())
    }
}

pub mod proxy {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AddAdmin(());
        impl AddAdmin {
            #[allow(dead_code)]
            pub fn encode_call(new_admin: ActorId) -> Vec<u8> {
                <AddAdmin as ActionIo>::encode_call(&new_admin)
            }
        }
        impl ActionIo for AddAdmin {
            const ROUTE: &'static [u8] = &[
                20, 80, 114, 111, 120, 121, 32, 65, 100, 100, 65, 100, 109, 105, 110,
            ];
            type Params = ActorId;
            type Reply = super::ProxyEvent;
        }
        pub struct ChangePingContractId(());
        impl ChangePingContractId {
            #[allow(dead_code)]
            pub fn encode_call(contract_id: ActorId) -> Vec<u8> {
                <ChangePingContractId as ActionIo>::encode_call(&contract_id)
            }
        }
        impl ActionIo for ChangePingContractId {
            const ROUTE: &'static [u8] = &[
                20, 80, 114, 111, 120, 121, 80, 67, 104, 97, 110, 103, 101, 80, 105, 110, 103, 67,
                111, 110, 116, 114, 97, 99, 116, 73, 100,
            ];
            type Params = ActorId;
            type Reply = super::ProxyEvent;
        }
        pub struct ChangeTrafficLightContractId(());
        impl ChangeTrafficLightContractId {
            #[allow(dead_code)]
            pub fn encode_call(contract_id: ActorId) -> Vec<u8> {
                <ChangeTrafficLightContractId as ActionIo>::encode_call(&contract_id)
            }
        }
        impl ActionIo for ChangeTrafficLightContractId {
            const ROUTE: &'static [u8] = &[
                20, 80, 114, 111, 120, 121, 112, 67, 104, 97, 110, 103, 101, 84, 114, 97, 102, 102,
                105, 99, 76, 105, 103, 104, 116, 67, 111, 110, 116, 114, 97, 99, 116, 73, 100,
            ];
            type Params = ActorId;
            type Reply = super::ProxyEvent;
        }
        pub struct ContractsId(());
        impl ContractsId {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <ContractsId as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for ContractsId {
            const ROUTE: &'static [u8] = &[
                20, 80, 114, 111, 120, 121, 44, 67, 111, 110, 116, 114, 97, 99, 116, 115, 73, 100,
            ];
            type Params = ();
            type Reply = super::ProxyEvent;
        }
    }
}
pub struct TrafficLightCaller<R> {
    remoting: R,
}
impl<R> TrafficLightCaller<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::TrafficLightCaller for TrafficLightCaller<R> {
    type Args = R::Args;
    fn call_green(&mut self) -> impl Call<Output = ProxyTrafficLightCallerEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light_caller::io::CallGreen>::new(self.remoting.clone(), ())
    }
    fn call_red(&mut self) -> impl Call<Output = ProxyTrafficLightCallerEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light_caller::io::CallRed>::new(self.remoting.clone(), ())
    }
    fn call_yellow(&mut self) -> impl Call<Output = ProxyTrafficLightCallerEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light_caller::io::CallYellow>::new(self.remoting.clone(), ())
    }
    fn call_traffic_light_state(
        &self,
    ) -> impl Query<Output = ProxyTrafficLightCallerEvent, Args = R::Args> {
        RemotingAction::<_, traffic_light_caller::io::CallTrafficLightState>::new(
            self.remoting.clone(),
            (),
        )
    }
}

pub mod traffic_light_caller {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct CallGreen(());
        impl CallGreen {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <CallGreen as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for CallGreen {
            const ROUTE: &'static [u8] = &[
                72, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67, 97, 108, 108, 101,
                114, 36, 67, 97, 108, 108, 71, 114, 101, 101, 110,
            ];
            type Params = ();
            type Reply = super::ProxyTrafficLightCallerEvent;
        }
        pub struct CallRed(());
        impl CallRed {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <CallRed as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for CallRed {
            const ROUTE: &'static [u8] = &[
                72, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67, 97, 108, 108, 101,
                114, 28, 67, 97, 108, 108, 82, 101, 100,
            ];
            type Params = ();
            type Reply = super::ProxyTrafficLightCallerEvent;
        }
        pub struct CallYellow(());
        impl CallYellow {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <CallYellow as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for CallYellow {
            const ROUTE: &'static [u8] = &[
                72, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67, 97, 108, 108, 101,
                114, 40, 67, 97, 108, 108, 89, 101, 108, 108, 111, 119,
            ];
            type Params = ();
            type Reply = super::ProxyTrafficLightCallerEvent;
        }
        pub struct CallTrafficLightState(());
        impl CallTrafficLightState {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <CallTrafficLightState as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for CallTrafficLightState {
            const ROUTE: &'static [u8] = &[
                72, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116, 67, 97, 108, 108, 101,
                114, 84, 67, 97, 108, 108, 84, 114, 97, 102, 102, 105, 99, 76, 105, 103, 104, 116,
                83, 116, 97, 116, 101,
            ];
            type Params = ();
            type Reply = super::ProxyTrafficLightCallerEvent;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ProxyPingCallerEvent {
    Test,
    PingContractStateAllCalls(Vec<(ActorId, PingEnum)>),
    PingContractStateLastWhoCall((ActorId, PingEnum)),
    PingContractResponse(PingEnum),
    Error(ProxyPingCallerError),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum PingEnum {
    Ping,
    Pong,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ProxyPingCallerError {
    PingContractIdNotSet,
    PingContractError(String),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ProxyEvent {
    PingContractIdSet,
    TrafficLightContractIdSet,
    AdminAdded(ActorId),
    PingContractId(Option<ActorId>),
    TrafficLightContractId(Option<ActorId>),
    ContractsId(ContractsId),
    Error(ProxyErrors),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct ContractsId {
    pub ping_contract_id: Option<ActorId>,
    pub traffic_light_contract_id: Option<ActorId>,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ProxyErrors {
    OnlyAdminsCanChangeContactId,
    AdminExistsInContract(ActorId),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ProxyTrafficLightCallerEvent {
    Test,
    TrafficLightContractResponse(TrafficLightEvent),
    TrafficLightContractState(IoTrafficLightState),
    Error(ProxyTrafficLightCallerError),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum TrafficLightEvent {
    Green,
    Yellow,
    Red,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct IoTrafficLightState {
    pub current_light: String,
    pub all_users: Vec<(ActorId, String)>,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum ProxyTrafficLightCallerError {
    TrafficLightContractIdNotSet,
    TrafficLightContractError(String),
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
        fn new_with_contracts_id(
            &self,
            ping_contract_id: ActorId,
            traffic_light_contract_id: ActorId,
        ) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait PingCaller {
        type Args;
        fn call_ping(&mut self) -> impl Call<Output = ProxyPingCallerEvent, Args = Self::Args>;
        fn call_pong(&mut self) -> impl Call<Output = ProxyPingCallerEvent, Args = Self::Args>;
        fn call_all_calls(&self) -> impl Query<Output = ProxyPingCallerEvent, Args = Self::Args>;
        fn call_last_who_call(
            &self,
        ) -> impl Query<Output = ProxyPingCallerEvent, Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Proxy {
        type Args;
        fn add_admin(
            &mut self,
            new_admin: ActorId,
        ) -> impl Call<Output = ProxyEvent, Args = Self::Args>;
        fn change_ping_contract_id(
            &mut self,
            contract_id: ActorId,
        ) -> impl Call<Output = ProxyEvent, Args = Self::Args>;
        fn change_traffic_light_contract_id(
            &mut self,
            contract_id: ActorId,
        ) -> impl Call<Output = ProxyEvent, Args = Self::Args>;
        fn contracts_id(&self) -> impl Query<Output = ProxyEvent, Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait TrafficLightCaller {
        type Args;
        fn call_green(
            &mut self,
        ) -> impl Call<Output = ProxyTrafficLightCallerEvent, Args = Self::Args>;
        fn call_red(
            &mut self,
        ) -> impl Call<Output = ProxyTrafficLightCallerEvent, Args = Self::Args>;
        fn call_yellow(
            &mut self,
        ) -> impl Call<Output = ProxyTrafficLightCallerEvent, Args = Self::Args>;
        fn call_traffic_light_state(
            &self,
        ) -> impl Query<Output = ProxyTrafficLightCallerEvent, Args = Self::Args>;
    }
}

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
extern crate std;

#[cfg(feature = "with_mocks")]
#[cfg(not(target_arch = "wasm32"))]
pub mod mockall {
    use super::*;
    use sails_rs::mockall::*;
    mock! { pub PingCaller<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::PingCaller for PingCaller<A> { type Args = A; fn call_ping (&mut self, ) -> MockCall<A, ProxyPingCallerEvent>;fn call_pong (&mut self, ) -> MockCall<A, ProxyPingCallerEvent>;fn call_all_calls (& self, ) -> MockQuery<A, ProxyPingCallerEvent>;fn call_last_who_call (& self, ) -> MockQuery<A, ProxyPingCallerEvent>; } }
    mock! { pub Proxy<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::Proxy for Proxy<A> { type Args = A; fn add_admin (&mut self, new_admin: ActorId,) -> MockCall<A, ProxyEvent>;fn change_ping_contract_id (&mut self, contract_id: ActorId,) -> MockCall<A, ProxyEvent>;fn change_traffic_light_contract_id (&mut self, contract_id: ActorId,) -> MockCall<A, ProxyEvent>;fn contracts_id (& self, ) -> MockQuery<A, ProxyEvent>; } }
    mock! { pub TrafficLightCaller<A> {} #[allow(refining_impl_trait)] #[allow(clippy::type_complexity)] impl<A> traits::TrafficLightCaller for TrafficLightCaller<A> { type Args = A; fn call_green (&mut self, ) -> MockCall<A, ProxyTrafficLightCallerEvent>;fn call_red (&mut self, ) -> MockCall<A, ProxyTrafficLightCallerEvent>;fn call_yellow (&mut self, ) -> MockCall<A, ProxyTrafficLightCallerEvent>;fn call_traffic_light_state (& self, ) -> MockQuery<A, ProxyTrafficLightCallerEvent>; } }
}
